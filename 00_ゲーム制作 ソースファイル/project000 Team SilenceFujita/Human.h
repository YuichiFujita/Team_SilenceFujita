//======================================================================================================================
//
//	人間ヘッダー [Human.h]
//	Author：小原立暉
//
//======================================================================================================================
#ifndef _HUMAN_H_					// このマクロ定義がされていない場合
#define _HUMAN_H_					// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"
#include "game.h"
#include "model.h"
#include "curve.h"
#include "icon.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_HUMAN	(256)	// 使用する人間の最大数
#define HUMAN_WIDTH	(10.0f)	// 人の縦幅
#define HUMAN_DEPTH	(10.0f)	// 人の奥行

#define MAX_PARTS	(15)	// パーツの最大数
#define MAX_MOTION	(6)		// モーションの最大数
#define MAX_KEY		(8)		// キーの最大数

//**********************************************************************************************************************
//	列挙型定義(HUMANSTATE)
//**********************************************************************************************************************
typedef enum
{
	HUMANSTATE_WALK = 0,	// 歩き状態
	HUMANSTATE_STOP,		// ストップ状態
	HUMANSTATE_FLY,			// 吹き飛ばし状態
	HUMANSTATE_OTOTO,		// すれ違い状態
	HUMANSTATE_MAX			// この列挙型の総数
}HUMANSTATE;

//**********************************************************************************************************************
//	列挙型定義(HUMANTYPE)
//**********************************************************************************************************************
typedef enum
{
	HUMANTYPE_001 = 0,		// 人間1
	HUMANTYPE_002,			// 人間2
	HUMANTYPE_003,			// 人間3
	HUMANTYPE_CIGARETTE,	// 歩きタバコ
	HUMANTYPE_SMARTPHONE,	// 歩きスマホ
	HUMANTYPE_MAX			// この列挙型の総数
}HUMANTYPE;

//**********************************************************************************************************************
//	列挙型定義 (MOTIONTYPE)
//**********************************************************************************************************************
typedef enum
{
	MOTIONTYPE_STOP = 0,	// 停止状態
	MOTIONTYPE_MOVE,		// 移動状態
	MOTIONTYPE_SCARED,		// 怖がり状態
	MOTIONTYPE_MAX,			// この列挙型の総数
} MOTIONTYPE;

//**********************************************************************************************************************
//	構造体定義 (Key)
//**********************************************************************************************************************
typedef struct
{
	int nFrame;							// キー再生フレーム数
	D3DXVECTOR3 aPos[MAX_PARTS];		// モデル (パーツ) の位置
	D3DXVECTOR3 aRot[MAX_PARTS];		// モデル (パーツ) の向き
}Key;

//**********************************************************************************************************************
//	構造体定義 (KeyInfo)
//**********************************************************************************************************************
typedef struct
{
	bool bLoop;							// ループ ON / OFF
	int  nNumKey;						// キー数
	Key  aKey[MAX_KEY];					// キーの情報
}KeyInfo;

//**********************************************************************************************************************
//	構造体定義 (MotionInfo)
//**********************************************************************************************************************
typedef struct
{
	KeyInfo    aMotion[MAX_MOTION];		// モーションの情報
	MOTIONTYPE type;					// モーションの状態
	int        nPose;					// モーションのポーズ番号
	int        nCounter;				// モーションのカウンター
	int        nParts;					// パーツの総数
}MotionInfo;

//**********************************************************************************************************************
//	構造体定義 (HumanParts)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 initPos;				// 初期の位置
	D3DXVECTOR3 pos;					// 現在の位置
	D3DXVECTOR3 initRot;				// 初期の向き
	D3DXVECTOR3 rot;					// 現在の向き
	D3DXMATRIX  mtxWorld;				// ワールドマトリックス
	Model       modelData;				// モデル情報
	int         nParentID;				// 親のインデックス
}HumanParts;

//**********************************************************************************************************************
//	構造体定義 (Human)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3  pos;					// 現在の位置
	D3DXVECTOR3  posOld;				// 前回の位置
	D3DXVECTOR3  move;					// 移動量
	float		 fMaxMove;				// 移動量の最大数
	float		 fLandPos;				// 着地点
	D3DXVECTOR3  rot;					// 向き
	D3DXMATRIX   mtxWorld;				// ワールドマトリックス
	MotionInfo   motion;				// モーション情報
	HumanParts   aParts[MAX_PARTS];		// パーツ情報
	IconInfo	 icon;					// アイコンの情報
	HUMANTYPE	 type;					// 種類
	MOVETYPE	 typeMove;				// 行動の種類
	int			 nShadowID;				// 影のインデックス
	bool		 bJump;					// ジャンプしているかどうか
	bool		 bMove;					// 移動しているかどうか
	bool		 bUse;					// 使用しているか
	bool		 bRecur;				// 復活するかどうか
	HUMANSTATE	 state;					// 状態
	HUMANCURVE	 curveInfo;				// 曲がり角の情報
	Judge		 judge;					// ジャッジ
}Human;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitHuman(void);					// 人間の初期化処理
void UninitHuman(void);					// 人間の終了処理
void UpdateHuman(void);					// 人間の更新処理
void DrawHuman(void);					// 人間の描画処理
void SetHuman(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int walk, bool bRecur, int type);			// 人間の設定処理
Human *GetHumanData(void);				// 人間の取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************

#endif