//===========================================
//
// ボーナスヘッダー[bonus.h]
// Author 小原立暉
//
//===========================================
#ifndef _BONUS_H_
#define _BONUS_H_

#include "main.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_BONUS		(128)		// ボーナスの最大数

#define SCORE_HUMAN		(1000)		// 人を吹き飛ばした時のスコア
#define SCORE_OBJECT	(3000)		// オブジェクトを壊した時のスコア
#define SCORE_CAR		(500)		// 車を封じ込めてる時のスコア
#define SCORE_ITEM		(100)		// アイテムをゲージ満杯状態で取得した時のスコア

#define BONUS_SPECIAL_TIME	(60)	// 高得点になる時間

#define SCORE_HUMAN_SP	(1500)		// 人を吹き飛ばした時のスコア(残り一分時)
#define SCORE_OBJECT_SP	(4000)		// オブジェクトを壊した時のスコア(残り一分時)
#define SCORE_CAR_SP	(1000)		// 車を封じ込めてる時のスコア(残り一分時)
#define SCORE_ITEM_SP	(200)		// アイテムをゲージ満杯状態で取得した時のスコア(残り一分時)

//**********************************************************************************************************************
// 右に出すか左に出すか(WHEREBONUS)
//**********************************************************************************************************************
typedef enum
{
	WHEREBONUS_RIGHT = 0,		// 右に出す
	WHEREBONUS_LEFT,			// 左に出す
	WHEREBONUS_MAX				// この列挙型の総数
}WHEREBONUS;

//**********************************************************************************************************************
//	ボーナスの状態(BONUSSTATE)
//**********************************************************************************************************************
typedef enum
{
	BONUSSTATE_FADE = 0,	// フェード状態
	BONUSSTATE_DISP,		// 表示状態
	BONUSSTATE_ADDSCORE,	// 加算状態
	BONUSSTATE_MAX			// この列挙型の総数
}BONUSSTATE;

//**********************************************************************************************************************
//得点表示の構造体
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;			// 位置
	D3DXVECTOR3 move;			// 移動量
	BONUSSTATE  state;			// 状態
	D3DXCOLOR	col;			// 色
	WHEREBONUS  whereBonus;		// ボーナスの左右
	int			nScore;			// スコアの値
	int			nStateCounter;	// 状態カウンター
	int			nDigit;			// 桁数
	bool		bUse;			// 使用しているかどうか
}Bonus;

//**********************************************************************************************************************
//プロトタイプ宣言
//**********************************************************************************************************************
void InitBonus(void);		// ボーナスの初期化処理
void UninitBonus(void);		// ボーナスの終了処理
void UpdateBonus(void);		// ボーナスの更新処理
void DrawBonus(void);		// ボーナスの描画処理
void SetBonus(int nBonus);	// ボーナスの設定処理
Bonus *GetBonus(void);		// ボーナスの取得処理

#endif