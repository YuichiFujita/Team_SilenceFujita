//======================================================================================================================
//
//	爆弾ヘッダー [bomb.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _BOMB_H_	// このマクロ定義がされていない場合
#define _BOMB_H_	// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "icon.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_BARRIER		(64)	// バリアの最大数
#define BOMB_RANGE_EMI	(D3DXCOLOR(0.7f, 0.7f, 0.7f, 0.7f))		// 範囲内時のマテリアルの色(Emissive)
#define BOMB_RANGE_DIF	(D3DXCOLOR(0.0f, 0.2f, 1.0f, 0.6f))		// 範囲内時のマテリアルの色(Diffuse)

//**********************************************************************************************************************
//	列挙型定義 (BOMBTYPE)
//**********************************************************************************************************************
typedef enum
{
	BOMBTYPE_CAR = 0,		// 車
	BOMBTYPE_POLICE,		// 警察
	BOMBTYPE_MAX,			// この列挙型の総数
} BOMBTYPE;

//**********************************************************************************************************************
//	列挙型定義 (BOMBSTATE)
//**********************************************************************************************************************
typedef enum
{
	BOMBSTATE_NONE = 0,		// 何もしない状態
	BOMBSTATE_RANGE,		// 範囲内状態
	BOMBSTATE_BAR_NEAR,		// バリア接近状態
	BOMBSTATE_BAR_IN,		// バリア内状態
	BOMBSTATE_MAX,			// この列挙型の総数
} BOMBSTATE;

//**********************************************************************************************************************
//	列挙型定義 (BARRIERSTATE)
//**********************************************************************************************************************
typedef enum
{
	BARRIERSTATE_NONE = 0,	// 何もしない状態
	BARRIERSTATE_FLY,		// 発射状態
	BARRIERSTATE_HOMING,	// 追尾状態
	BARRIERSTATE_LAND,		// 着弾状態
	BARRIERSTATE_ENLARGE,	// 拡大状態
	BARRIERSTATE_UP,		// 上昇状態
	BARRIERSTATE_SET,		// 完成状態
	BARRIERSTATE_DOWN,		// 下降状態
	BARRIERSTATE_REDUCE,	// 縮小状態
	BARRIERSTATE_MAX,		// この列挙型の総数
} BARRIERSTATE;

//**********************************************************************************************************************
//	列挙型定義 (BARSCOSTATE)
//**********************************************************************************************************************
typedef enum
{
	BARSCOSTATE_NONE = 0,	// 何もしない状態
	BARSCOSTATE_ADDSCORE,	// スコア加算状態
	BARSCOSTATE_MAX,		// この列挙型の総数
} BARSCOSTATE;

//**********************************************************************************************************************
//	構造体定義 (Barrier)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3  pos;		// 位置
	D3DXVECTOR3 *pCarPos;	// 車の位置
	D3DXVECTOR3  move;		// 移動量
	D3DXVECTOR3  rot;		// 向き
	D3DXVECTOR3  scale;		// 拡大率
	D3DXMATRIX   mtxWorld;	// ワールドマトリックス
	BARRIERSTATE state;		// 状態
	BOMBTYPE     type;		// 種類
	Model        modelData;	// モデル情報
	void        *pCar;		// 車アドレス
	int          nCounter;	// 状態管理カウンター
	IconInfo	 icon;		// アイコンの情報
	bool         bUse;		// 使用状況
}Barrier;

//**********************************************************************************************************************
//	構造体定義 (BarrierInfo)
//**********************************************************************************************************************
typedef struct
{
	Barrier    *pBarrier[MAX_BARRIER];		// バリアの情報
	BARSCOSTATE state;						// 状態
	int         nNumBarrier;				// 使ったバリアの総数
	int         nNumAddScore;				// スコア加算回数
	int         nCounterScore;				// スコア加算カウンター
	bool        bUse;						// 使用状況
}BarrierInfo;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitBomb(void);		// 爆弾の初期化処理
void UninitBomb(void);		// 爆弾の終了処理
void UpdateBomb(void);		// 爆弾の更新処理
void DrawBomb(void);		// 爆弾の描画処理
void ShotBarrier(void);		// バリアの発射処理

Barrier *GetBarrierData(void);				// バリアの取得処理
BARRIERSTATE GetBarrierState(void *pCar);	// バリアの状態の取得処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************

#endif