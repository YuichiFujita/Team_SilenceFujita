//======================================================================================================================
//
//	カーブヘッダー [curve.h]
//	Author：小原立暉
//
//======================================================================================================================
#ifndef _CURVE_H_						// このマクロ定義がされていない場合
#define _CURVE_H_						// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"
#include "model.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_CURVE			(10)		// 曲がれる最大数
#define MAX_CURVEPOINT		(100)		// 曲がり角の最大数
#define SHIFT_CAR_CURVE		(45.0f)		// 車のカーブでずらす幅
#define SHIFT_HUMAN_CURVE	(100.0f)	// 人のカーブでずらす幅

//**********************************************************************************************************************
//	曲がり角で曲がる角度
//**********************************************************************************************************************
typedef enum
{
	CURVE_RIGHT = 0,					//右に曲がる
	CURVE_LEFT,							//左に曲がる
	CURVE_MAX							//この列挙型の総数
}CURVEANGLE;

//**********************************************************************************************************************
//	現在走っている状態
//**********************************************************************************************************************
typedef enum
{
	DASH_RIGHT = 0,						//右に走っている
	DASH_LEFT,							//左に走っている
	DASH_FAR,							//奥に走っている
	DASH_NEAR,							//手前に走っている
	DASH_MAX							//この列挙型の総数
}DASHANGLE;

//**********************************************************************************************************************
//	曲がり角の構造体
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 curvePoint[MAX_CURVE];	// 曲がるポイント
	CURVEANGLE  curveAngle[MAX_CURVE];	// 曲がる方向
	int nNowCurve;						// 現在の曲がり角
	int nCurveTime;						// 曲がる回数
	int fCurveRot[MAX_CURVE];			// 目標の向き
	bool bCurveX[MAX_CURVE];			// X軸上を走っているかどうか
	bool bCurvePlus[MAX_CURVE];			// 座標上で＋方向に進んでいるかどうか
}CURVE;

//**********************************************************************************************************************
//	曲がり角の情報の構造体
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos;					// 曲がり角の位置
	CURVEANGLE curveAngle;				// カーブ出来る方向
	int nCurveNumber;					// カーブの番号
	int nPairNumber;					// 対となるカーブ番号
	DASHANGLE dashAngle;				// 走っている方向
	bool bDeadEnd;						// 行き止まりかどうか
}CURVEINFO;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitCurveInfo(void);				// カーブの情報の初期化処理
void SetCurvePoint(CURVE *pCurve, D3DXVECTOR3 *rot, D3DXVECTOR3 *pos);						// 車の曲がる位置の設定処理
void SetCurvePointHuman(CURVE *pCurve, D3DXVECTOR3 *rot, D3DXVECTOR3 *pos);					// 人間の曲がる位置の設定処理
void CurveRotCar(CURVE *pCurve, D3DXVECTOR3 *rot, D3DXVECTOR3 *move);						// 車の角度更新処理	
void CurveInfoRotCar(CURVEINFO *pCurve, D3DXVECTOR3 *rot, D3DXVECTOR3 *move, int *pCnt);	// 車の角度更新・補正処理
CURVEINFO GetCurveInfo(int nID);		//曲がり角の位置の取得処理

#endif