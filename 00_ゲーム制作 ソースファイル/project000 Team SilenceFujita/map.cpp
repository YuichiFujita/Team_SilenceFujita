//======================================================================================================================
//
//	マップ処理 [map.cpp]
//	Author：藤田勇一
//
//======================================================================================================================
//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"
#include "map.h"
#include "meshfield.h"
#include "camera.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_MAP	(2)	// 使用するポリゴン数

#define MAP_BG_X		(1105.0f)	// マップ背景の座標 (x)
#define MAP_BG_Y		(190.0f)	// マップ背景の座標 (y)
#define MAP_BG_SIZE_X	(170.0f)	// マップ背景の横幅
#define MAP_BG_SIZE_Y	(190.0f)	// マップ背景の縦幅

#define MAP_FRAME_PLUS	(5.0f)		// マップ枠の加算量

//**********************************************************************************************************************
//	コンスト定義
//**********************************************************************************************************************
const char *apTextureMap[] =		// テクスチャの相対パス
{
	"data\\TEXTURE\\ui002.tga",		// 背景のテクスチャ相対パス
	NULL,							// NULL
};

//**********************************************************************************************************************
//	列挙型定義 (TEXTURE_MAP)
//**********************************************************************************************************************
typedef enum
{
	TEXTURE_MAP_BG = 0,	// 背景
	TEXTURE_MAP_NULL,	// NULL
	TEXTURE_MAP_MAX,	// この列挙型の総数
} TEXTURE_MAP;

//**********************************************************************************************************************
//	グローバル変数
//**********************************************************************************************************************
LPDIRECT3DTEXTURE9      g_apTextureMap[TEXTURE_MAP_MAX] = {};	// テクスチャへのポインタ
LPDIRECT3DVERTEXBUFFER9 g_pVtxBuffMap = NULL;					// 頂点バッファへのポインタ

//======================================================================================================================
//	マップの初期化処理
//======================================================================================================================
void InitMap(void)
{
	//------------------------------------------------------------------------------------------------------------------
	//	マップの初期化
	//------------------------------------------------------------------------------------------------------------------
	// ポインタを宣言
	LPDIRECT3DDEVICE9 pDevice = GetDevice();	// デバイスへのポインタ
	VERTEX_2D         *pVtx;					// 頂点情報へのポインタ

	for (int nCntMap = 0; nCntMap < TEXTURE_MAP_MAX; nCntMap++)
	{ // 使用するテクスチャ数分繰り返す

		// テクスチャの読み込み
		D3DXCreateTextureFromFile(pDevice, apTextureMap[nCntMap], &g_apTextureMap[nCntMap]);
	}

	// 頂点バッファの生成
	pDevice->CreateVertexBuffer
	( // 引数
		sizeof(VERTEX_2D) * 4 * MAX_MAP,	// 必要頂点数
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,						// 頂点フォーマット
		D3DPOOL_MANAGED,
		&g_pVtxBuffMap,
		NULL
	);

	//------------------------------------------------------------------------------------------------------------------
	//	頂点情報の初期化
	//------------------------------------------------------------------------------------------------------------------
	// 頂点バッファをロックし、頂点情報へのポインタを取得
	g_pVtxBuffMap->Lock(0, 0, (void**)&pVtx, 0);

	//------------------------------------------------------------------------------------------------------------------
	//	背景の初期化
	//------------------------------------------------------------------------------------------------------------------
	// 頂点座標を設定
	pVtx[0].pos = D3DXVECTOR3(MAP_BG_X - MAP_BG_SIZE_X, MAP_BG_Y - MAP_BG_SIZE_Y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(MAP_BG_X + MAP_BG_SIZE_X, MAP_BG_Y - MAP_BG_SIZE_Y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(MAP_BG_X - MAP_BG_SIZE_X, MAP_BG_Y + MAP_BG_SIZE_Y, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(MAP_BG_X + MAP_BG_SIZE_X, MAP_BG_Y + MAP_BG_SIZE_Y, 0.0f);

	// rhw の設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 頂点カラーの設定
	pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[1].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[2].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[3].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//------------------------------------------------------------------------------------------------------------------
	//	枠の初期化
	//------------------------------------------------------------------------------------------------------------------
	// 頂点座標を設定
	pVtx[4].pos = D3DXVECTOR3(MAPCAM_X - MAP_FRAME_PLUS,                                           MAPCAM_Y - MAP_FRAME_PLUS,                                           0.0f);
	pVtx[5].pos = D3DXVECTOR3(MAPCAM_X - MAP_FRAME_PLUS + MAPCAM_SIZE_X + (MAP_FRAME_PLUS * 2.0f), MAPCAM_Y - MAP_FRAME_PLUS,                                           0.0f);
	pVtx[6].pos = D3DXVECTOR3(MAPCAM_X - MAP_FRAME_PLUS,                                           MAPCAM_Y - MAP_FRAME_PLUS + MAPCAM_SIZE_Y + (MAP_FRAME_PLUS * 2.0f), 0.0f);
	pVtx[7].pos = D3DXVECTOR3(MAPCAM_X - MAP_FRAME_PLUS + MAPCAM_SIZE_X + (MAP_FRAME_PLUS * 2.0f), MAPCAM_Y - MAP_FRAME_PLUS + MAPCAM_SIZE_Y + (MAP_FRAME_PLUS * 2.0f), 0.0f);

	// rhw の設定
	pVtx[4].rhw = 1.0f;
	pVtx[5].rhw = 1.0f;
	pVtx[6].rhw = 1.0f;
	pVtx[7].rhw = 1.0f;

	// 頂点カラーの設定
	pVtx[4].col = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);
	pVtx[5].col = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);
	pVtx[6].col = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);
	pVtx[7].col = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);

	// テクスチャ座標の設定
	pVtx[4].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[5].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[6].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[7].tex = D3DXVECTOR2(1.0f, 1.0f);

	// 頂点バッファをアンロックする
	g_pVtxBuffMap->Unlock();
}

//======================================================================================================================
//	マップの終了処理
//======================================================================================================================
void UninitMap(void)
{
	// テクスチャの破棄
	for (int nCntMap = 0; nCntMap < TEXTURE_MAP_MAX; nCntMap++)
	{ // 使用するテクスチャ数分繰り返す

		if (g_apTextureMap[nCntMap] != NULL)
		{ // 変数 (g_apTextureMap) がNULLではない場合

			g_apTextureMap[nCntMap]->Release();
			g_apTextureMap[nCntMap] = NULL;
		}
	}

	// 頂点バッファの破棄
	if (g_pVtxBuffMap != NULL)
	{ // 変数 (g_pVtxBuffMap) がNULLではない場合

		g_pVtxBuffMap->Release();
		g_pVtxBuffMap = NULL;
	}
}

//======================================================================================================================
//	マップの更新処理
//======================================================================================================================
void UpdateMap(void)
{

}

//======================================================================================================================
//	マップの描画処理
//======================================================================================================================
void DrawMap(void)
{
	// ポインタを宣言
	LPDIRECT3DDEVICE9 pDevice = GetDevice();	// デバイスへのポインタ

	// 頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, g_pVtxBuffMap, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	for (int nCntMap = 0; nCntMap < MAX_MAP; nCntMap++)
	{ // 使用するポリゴン数分繰り返す

		// テクスチャの設定
		pDevice->SetTexture(0, g_apTextureMap[nCntMap]);

		// ポリゴンの描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, nCntMap * 4, 2);
	}
}

#ifdef _DEBUG	// デバッグ処理
#endif