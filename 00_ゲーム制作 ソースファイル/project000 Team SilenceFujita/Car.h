//======================================================================================================================
//
//	車ヘッダー [Car.h]
//	Author：小原立暉
//
//======================================================================================================================
#ifndef _CAR_H_						// このマクロ定義がされていない場合
#define _CAR_H_						// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	インクルードファイル
//**********************************************************************************************************************
#include "main.h"
#include "model.h"

//**********************************************************************************************************************
//	マクロ定義
//**********************************************************************************************************************
#define MAX_CAR			(128)		// 使用する車の最大数
#define MAX_CURVE		(10)		// 曲がれる最大数

//**********************************************************************************************************************
//	曲がり角で曲がる角度
//**********************************************************************************************************************
typedef enum
{
	CURVE_RIGHT = 0,					//右に曲がる
	CURVE_LEFT,							//左に曲がる
	CURVE_MAX							//この列挙型の総数
}CURVEANGLE;

//**********************************************************************************************************************
//	警察車両の曲がり角
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 curvePoint[MAX_CURVE];	// 曲がるポイント
	CURVEANGLE  curveAngle[MAX_CURVE];	// 曲がる方向
	int nNowCurve;						// 現在の曲がり角
	int nCurveTime;						// 曲がる回数
	int fCurveRot;						// 目標の向き
	bool bCurveX[MAX_CURVE];			// X軸上を走っているかどうか
	bool bCurvePlus[MAX_CURVE];			// 座標上で＋方向に進んでいるかどうか
}CARCURVE;

//**********************************************************************************************************************
//	構造体定義 (Police)
//**********************************************************************************************************************
typedef struct
{
	D3DXVECTOR3  pos;					// 現在の位置
	D3DXVECTOR3  posOld;				// 前回の位置
	D3DXVECTOR3  move;					// 移動量
	D3DXVECTOR3  rot;					// 向き
	D3DXMATRIX   mtxWorld;				// ワールドマトリックス
	Model        modelData;				// モデル情報
	int			 nShadowID;				// 影のインデックス
	bool		 bMove;					// 移動しているかどうか
	bool		 bUse;					// 使用しているか
	CARCURVE	 carCurve;				// 曲がり角関係
}Car;

//**********************************************************************************************************************
//	ぶつかったもののタイプ
//**********************************************************************************************************************
typedef enum
{
	COLLOBJECTTYPE_PLAYER = 0,			// プレイヤー
	COLLOBJECTTYPE_POLICE,				// 警察
	COLLOBJECTTYPE_CAR,					// 車
	COLLOBJECTTYPE_MAX					// この列挙型の総数
}COLLOBJECTTYPE;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitCar(void);					// 車の初期化処理
void UninitCar(void);				// 車の終了処理
void UpdateCar(void);				// 車の更新処理
void DrawCar(void);					// 車の描画処理
void SetCar(D3DXVECTOR3 pos, D3DXVECTOR3 rot, CARCURVE carCurve);		// 車の設定処理
void CollisionCar(D3DXVECTOR3 *pPos, D3DXVECTOR3 *pOldPos, float fWidth, float fDepth); 	// 車との当たり判定
Car *GetCarData(void);																		// 車の取得処理
void CollisionStopCar(D3DXVECTOR3 targetpos, D3DXVECTOR3 targetrot, D3DXVECTOR3 *move, float fTargetRadius, COLLOBJECTTYPE collObject);	// 車の停止処理

//**********************************************************************************************************************
//	プロトタイプ宣言 (デバッグ用)
//**********************************************************************************************************************

#endif