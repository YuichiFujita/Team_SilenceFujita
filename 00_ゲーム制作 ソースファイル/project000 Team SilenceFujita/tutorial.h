//======================================================================================================================
//
//	チュートリアル画面ヘッダー [tutorial.h]
//	Author：藤田勇一
//
//======================================================================================================================
#ifndef _TUTORIAL_H_			// このマクロ定義がされていない場合
#define _TUTORIAL_H_			// 二重インクルード防止のマクロを定義する

//**********************************************************************************************************************
//	列挙型定義 (LESSON)
//**********************************************************************************************************************
typedef enum
{
	LESSON_00 = 0,				// レッスン0 (移動)
	LESSON_01,					// レッスン1 (ジャンプ)
	LESSON_02,					// レッスン2 (攻撃)
	LESSON_03,					// レッスン3 (討伐)
	LESSON_04,					// レッスン4 (破壊)
	LESSON_05,					// レッスン5 (回復)
	LESSON_06,					// レッスン6 (時間)
	LESSON_MAX					// この列挙型の総数
} LESSON;

//**********************************************************************************************************************
//	列挙型定義 (TUTORIALSTATE)
//**********************************************************************************************************************
typedef enum
{
	TUTORIALSTATE_NORMAL = 0,	// 通常状態
	TUTORIALSTATE_END,			// 終了状態
	TUTORIALSTATE_MAX			// この列挙型の総数
} TUTORIALSTATE;

//**********************************************************************************************************************
//	プロトタイプ宣言
//**********************************************************************************************************************
void InitTutorial(void);									// チュートリアル画面の初期化処理
void UninitTutorial(void);									// チュートリアル画面の終了処理
void UpdateTutorial(void);									// チュートリアル画面の更新処理
void DrawTutorial(void);									// チュートリアル画面の描画処理
void AddLessonState(void);									// レッスンの状態の加算処理
void SetTutorialState(TUTORIALSTATE state, int nCounter);	// チュートリアル画面の設定処理
TUTORIALSTATE GetLessonState(void);							// レッスンの状態の取得処理

#endif